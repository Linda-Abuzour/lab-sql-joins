-- Lab-sql-joins
USE sakila;

-- NOTE: JOIN is an abbreviation for INNER JOIN, which is the default join type in SQL.

-- 1 List the number of films per category.
SELECT name as category_name, count(*) as num_films
FROM category
JOIN film_category USING (category_id)
GROUP BY name
ORDER BY num_films desc;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT  s.store_id, c.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
JOIN country co ON c.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM store
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;

-- 4. Determine the average length of films for each category. Round the average to two decimal places.
SELECT category.name, ROUND(AVG(film.length),2) AS average_running_time
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category.name;

-- 5. Identify the film categories with the longest average running time. Round the average to two decimal places.
SELECT category.name, ROUND(AVG(film.length),2) AS average_running_time
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category.name
ORDER BY average_running_time DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id
ORDER BY rental_count DESC
LIMIT 10;

-- 7 Can "Academy Dinosaur" be rented from Store 1?
-- To determine if "Academy Dinosaur" can be rented from Store 1, we need to join the film table, the inventory table, and the rental table on the appropriate columns, and filter the results based on the specified conditions. 
SELECT film.film_id, film.title, store.store_id, inventory.inventory_id
FROM inventory
JOIN store using (store_id)
JOIN film using (film_id)
WHERE title = 'Academy Dinosaur' AND store.store_id = 1;

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."
SELECT film.title, COUNT(inventory.film_id) AS ‘Number of Copies’,
CASE
WHEN ISNULL(inventory.film_id) then ‘Not Available’
ELSE ‘Available’
END AS rental_available
FROM film
LEFT JOIN inventory ON film.film_id = inventory.film_id
GROUP BY film.film_id
ORDER BY film.film_id ASC;